<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Mr. Chen]]></title>
  <subtitle><![CDATA[There is something inside ,that they can't get to , that they can't touch. That's yours.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-11-23T07:06:04.336Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[YanHong Chen]]></name>
    <email><![CDATA[385424708@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[]]></title>
    <link href="http://yoursite.com/2014/11/23/cocos2dxautorelease/"/>
    <id>http://yoursite.com/2014/11/23/cocos2dxautorelease/</id>
    <published>2014-11-23T07:05:31.000Z</published>
    <updated>2014-11-23T07:05:31.000Z</updated>
    <content type="html"><![CDATA[<p>title: Cocos2d-x之内存管理（一）<br>date: 2014-11-23 15:01:52<br>categories:cocos2d-x</p>
<h2 id="tags:[cocos2d-x,游戏引擎]">tags:[cocos2d-x,游戏引擎]</h2>
<h2 id="cocos2dx内存管理">cocos2dx内存管理</h2>
<ul>
<li>在之前的开发过程中经常碰到正常create的一个对象，在使用的时候报错提示对象未被创建，这种情况常常出现在sequence、array等对象上，这些都是由cocos2dx的内存管理机制引起的。<br>在C++中，内存分配可在栈上分配，栈上的内存管理我们无法处理；也可以通过new在堆上分配，然后通过手动delete，cocos2dx是在堆上进行内存分配，cocos2dx内存管理采用的是引用技术的方式，当创建一个对象后引用技术为1，并通过retain和release来增持和减少其引用计数，cocos的回收机制根据引用计数来决定是否释放对象。</li>
</ul>
<h2 id="引用计数">引用计数</h2>
<ul>
<li>通过给每个对象维护一个引用计数器，记录对象当前被引用的次数，每增加一次引用时计数+1；销毁一次引用时计数-1，当引用计数为0的时候自动触发该对象的释放。</li>
</ul>
<h2 id="cocos2dx基于引用计数实现内存管理">cocos2dx基于引用计数实现内存管理</h2>
<ul>
<li>在3.x之前的版本中内存管理方式类似Objective-C里面的自动回收池的机制来管理对象内存的释放：在cocos中在每帧渲染结束时，在游戏的每一帧都会执行一个大循环，建立一个内存回收池，把autorelease的对象加入到这个回收池中，每一帧结束后，回收池被释放，池中每个对象都会release一下，计数-1，当引用计数等于0的时候，就会删除对象，如果引用计数不为0，就不会删除，在下一帧的时候会重新创建一个回收池，当前帧中调用autorelease的对象的会被加入，上一次添加的对象不会再添加：</li>
</ul>
<figure class="highlight CCDirector.cpp```"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   void CCDisplayLinkDirector::mainLoop(void)</div><div class="line">{</div><div class="line">	<span class="keyword">...</span></div><div class="line">	CCPoolManager::sharedPoolManager()-&gt;pop();  </div><div class="line">	<span class="keyword">...</span>     </div><div class="line">}</div></pre></td></tr></table></figure>

<p>CCAutoreleasepool.cpp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="makefile">	void CCPoolManager::pop()</span></div><div class="line">	{</div><div class="line">		if (! m_pCurReleasePool)</div><div class="line">		{</div><div class="line">			return;</div><div class="line">		}</div><div class="line">		int nCount = m_pReleasePoolStack-&gt;count();</div><div class="line">		m_pCurReleasePool-&gt;clear();</div><div class="line">		if(nCount &gt; 1)</div><div class="line">		{</div><div class="line">			m_pReleasePoolStack-&gt;removeObjectAtIndex(nCount-1);</div><div class="line">			m_pCurReleasePool = (CCAutoreleasePool*)m_pReleasePoolStack-&gt;objectAtIndex(nCount - 2);</div><div class="line"></div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line"><span class="comment">##retain和release</span></div><div class="line"></div><div class="line">* 根据上面源码可以知道当创建完一个对象的成员变量后，如果不立即使用则会被内存自动(下一帧渲染时)清理掉。为了防止被清理，则需要在创建后调用retain，当不需要这个对象时调用release进行释放。</div><div class="line">通常在我们创建的一个sprite或者layer后，并不会去调用retain，而是把对象addChild给其它对象，之后就不会被清除，其实在addChild操作的时候调用了retain：</div></pre></td></tr></table></figure>

<p>CCNode.cpp```</p>
<pre><code><span class="literal">void</span> CCNode<span class="tag">::childrenAlloc</span>(<span class="literal">void</span>)
{
    m_pChildren <span class="subst">=</span> CCArray<span class="tag">::createWithCapacity</span>(<span class="number">4</span>);
    m_pChildren<span class="subst">-&gt;</span>retain();<span class="comment">//调用retain</span>
}
<span class="literal">void</span> CCNode<span class="tag">::addChild</span>(CCNode <span class="subst">*</span>child, int zOrder, int <span class="built_in">tag</span>)
{    
    CCAssert( child <span class="subst">!=</span> <span class="built_in">NULL</span>, <span class="string">"Argument must be non-nil"</span>);
    CCAssert( child<span class="subst">-&gt;</span>m_pParent <span class="subst">==</span> <span class="built_in">NULL</span>, <span class="string">"child already added. It can't be added again"</span>);

    <span class="keyword">if</span>( <span class="subst">!</span> m_pChildren )
    {
           this<span class="subst">-&gt;</span>childrenAlloc();<span class="comment">//分配child的空间</span>
    }

    this<span class="subst">-&gt;</span>insertChild(child, zOrder);

    child<span class="subst">-&gt;</span>m_nTag <span class="subst">=</span> <span class="built_in">tag</span>;

    child<span class="subst">-&gt;</span>setParent(this);
    child<span class="subst">-&gt;</span>setOrderOfArrival(s_globalOrderOfArrival<span class="subst">++</span>);

    <span class="keyword">if</span>( m_bRunning )
    {
        child<span class="subst">-&gt;</span>onEnter();
        child<span class="subst">-&gt;</span>onEnterTransitionDidFinish();
    }
}
</code></pre><ul>
<li>所以说，那些被添加的父类中的对象无需调用retain，因为父类已经为它调用的retain，并且在销毁时调用release。而像array、sequence这些临时用来存储的对象在创建的时候引用计数为1，因为在使用的时候基本不会把它添加到父类，所以就不会调用到retain，当当前帧结束时，删除当前帧创建的进程池，并对进程池中的对象调用release，引用计数-1，所以之前创建的arry、sequence的引用计数变为了0，自动被销毁清除。</li>
</ul>
<h2 id="3-1之后的版本新增RefPtr内存管理方式">3.1之后的版本新增RefPtr内存管理方式</h2>
<p>在3.1以后的版本中新增了参考C++中share_ptr实现的RefPtr智能指针方式，这种将在以后的文章中分析学习。</p>
<h2 id="参考">参考</h2>
<p><a href="http://cn.cocos2d-x.org/tutorial/show?id=1668" target="_blank" rel="external">解析Cocos2d-x中的只能指针</a></p>
<p><a href="http://www.zaojiahua.com/memory-management.html" target="_blank" rel="external">Cocos2d-x的内存管理机制</a></p>
<p><a href="http://cn.cocos2d-x.org/tutorial/show?id=1668" target="_blank" rel="external">cocos2d-x的CCObeject与autorelease之深入分析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: Cocos2d-x之内存管理（一）<br>date: 2014-11-23 15:01:52<br>categories:cocos2d-x</p>
<h2 id="tags:[cocos2d-x,游戏引擎]">tags:[cocos2d-x,游戏引擎]</h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://yoursite.com/2014/11/16/test/"/>
    <id>http://yoursite.com/2014/11/16/test/</id>
    <published>2014-11-16T09:31:45.000Z</published>
    <updated>2014-11-16T10:08:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/test.jpg" alt="test"><br><img src="/img/2.png" alt="2"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/test.jpg" alt="test"><br><img src="/img/2.png" alt="2"></p>
]]>
    </summary>
    
  </entry>
  
</feed>
